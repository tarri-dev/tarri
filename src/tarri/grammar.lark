// === Grammar TARRI Stabil Multi-Titikawal ===

start: top_level_stmt*

// Top-level statements yang bisa muncul di root
?top_level_stmt: var_decl
               | func_decl
               | class_decl
               | entry_point
               | import_stmt
               | expr_stmt

// Struktur Program
entry_point: "titikawal" block

block: "{" statement* "}"

?statement: var_decl
          | func_decl
          | class_decl
          | if_stmt
          | loop_stmt
          | try_catch_stmt
          | return_stmt
          | break_stmt
          | continue_stmt
          | print_stmt
          | expr_stmt
          | entry_point
          | tabel_stmt

// ========================
// ===  TABEL & METHOD  ===
// ========================

tabel_stmt: VAR_NAME "untuk" method_call
method_call: NAME "(" [args] ")"

// ========================
// ===  IMPORT & MODUL  ===
// ========================

import_stmt: "undang" NAME ("dari" NAME)?

// ========================
// ===  VARIABEL & KONST ===
// ========================

var_decl: VAR_NAME (EQUAL | PLUS_EQUAL | MINUS_EQUAL) expr -> auto_var_decl

// ========================
// ===  FUNGSI  ===
// ========================

func_decl: "fungsi" NAME "(" [params] ")" block
params: param ("," param)*
param: VAR_NAME | NAME

return_stmt: "tampilkan" expr
           | "kembalikan" expr
           | "sembunyikan"

// ========================
// ===  KELAS & OOP  ===
// ========================

class_decl: "kelas" NAME ["perluas" NAME] block

// ========================
// ===  KONTROL ALUR  ===
// ========================

if_stmt: if_branch ("ataujika" expr block | "ataujika" "(" expr ")" block)* ["lainnya" block]

if_branch: ("jika" expr block | "jika" "(" expr ")" block)


// ========================
// ===  PERULANGAN  ===
// ========================

loop_stmt: "ulangi" block
         | "ulangidari" VAR_NAME EQUAL expr "hingga" expr block
         | "selama" expr block
         | "setiap" VAR_NAME "dari" expr block
         | "setiapdari" VAR_NAME EQUAL expr "hingga" expr "dari" expr block
         | "untuk" VAR_NAME "dalam" expr block
         | "untuk" "setiap" VAR_NAME "dalam" expr block

break_stmt: "hentikan"
continue_stmt: "lanjutkan"

// ========================
// ===  ERROR HANDLING  ===
// ========================

try_catch_stmt: "coba" block "tangkap" "(" VAR_NAME ")" block ["akhirnya" block]

// ========================
// ===  PRINT & OUTPUT  ===
// ========================

// print_stmt: "cetak" expr
print_stmt: "cetak" "(" [expr ("," expr)*] ")"


// ========================
// ===  EKSPRESI UMUM  ===
// ========================

expr_stmt: expr

?expr: expr_or

?expr_or: expr_or "atau" expr_and   -> or_expr
        | expr_and

?expr_and: expr_and "dan" expr_in   -> and_expr
         | expr_in

?expr_in: expr_in "dalam" expr_not  -> in_expr
        | expr_not

?expr_not: "bukan" expr_cmp          -> not_expr
         | expr_cmp

?expr_cmp: expr_cmp COMP_OP expr_add  -> compare_expr
         | expr_add

?expr_add: expr_add ADD_OP expr_mul   -> add_expr
         | expr_mul

?expr_mul: expr_mul MUL_OP expr_atom  -> mul_expr
         | expr_atom

// Atom & Sub-ekspresi
?expr_atom: atom
          | "(" expr ")"               -> grouped_expr
          | expr_atom "(" [args] ")"   -> call_expr
          | expr_atom "." VAR_NAME
          | expr_atom "[" index_expr "]" -> indexing
          | expr_atom "->" TYPE_CAST     -> type_cast

// ========================
// ===  ARGUMEN / INDEX  ===
// ========================

args: expr ("," expr)*

?index_expr: expr                       -> single_index
        //    | expr "hingga" expr         -> slice_expr
        //    | expr ("dan" expr)+         -> pair_expr
           | expr ("..") expr           -> slice_expr
           | expr ("&") expr+           -> pair_expr
           |                            -> empty_index

// ========================
// ===  LITERAL / NILAI ===
// ========================

?atom: NUMBER                 -> number
     | ESCAPED_STRING         -> string
     | TRIPLE_STRING          -> string
     | SINGLE_QUOTE_STRING    -> string
     | "Benar"                -> true
     | "Salah"                -> false
     | "Kosong"               -> null
     | "Hampa"                -> null
     | VAR_NAME
     | NAME                   -> identifier 
     | list_literal
     | dict_literal

list_literal: "[" [expr ("," expr)*] "]"
dict_literal: "{" [dict_pair ("," dict_pair)*] "}"
dict_pair: (VAR_NAME | ESCAPED_STRING | NAME) "=" expr

// ========================
// ===  OPERATOR & TOKEN ===
// ========================

COMP_OP: "==" | "!=" | "<" | ">" | "<=" | ">="
ADD_OP: "+" | "-"
MUL_OP: "*" | "/" | "%"
PLUS_EQUAL: "+="
MINUS_EQUAL: "-="

EQUAL: "="
VAR_NAME: /_[a-zA-Z][a-zA-Z0-9_]*/
NAME: /[a-zA-Z][a-zA-Z0-9_]*/
// NUMBER: /\d+(\.\d+)?/
// NUMBER: /-?\d+(\.\d+)?/
FLOAT: /-?\d+\.\d+/
INT:   /-?\d+/
NUMBER: FLOAT | INT

ESCAPED_STRING: /"[^"]*"/
TRIPLE_STRING: /(\"\"\"([^\"\\]|\\.|\"(?!\"\")|\\n)*\"\"\")|('''([^'\\]|\\.|'(?!'')|\\n)*''')/
SINGLE_QUOTE_STRING: /'[^']*'/

TYPE_CAST: "angka" | "kata"

// ========================
// ===  IGNORE SECTION  ===
// ========================

%ignore /\s+/
%ignore /#.*/

